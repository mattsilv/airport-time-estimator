
// mergefiles.js
const fs = require("fs");
const path = require("path");
const ignore = require("ignore");

// Initialize ignore parser with .gitignore rules
const ig = ignore();
const gitignorePath = path.join(__dirname, ".gitignore");
if (fs.existsSync(gitignorePath)) {
  const gitignoreContent = fs.readFileSync(gitignorePath).toString();
  ig.add(gitignoreContent);
}

// File extensions to include
const extensions = [".js", ".toml", ".json", ".html"];
const outputFilePath = path.join(__dirname, "merged.txt");
let mergedContent = "";

// Function to read files recursively
const readFilesRecursively = (dir) => {
  const files = fs.readdirSync(dir);

  files.forEach((file) => {
    const filePath = path.join(dir, file);
    const relativePath = path.relative(__dirname, filePath);

    // Check if the file should be ignored
    if (ig.ignores(relativePath)) {
      return;
    }

    const stat = fs.statSync(filePath);

    if (stat.isDirectory()) {
      readFilesRecursively(filePath);
    } else if (extensions.includes(path.extname(file))) {
      const content = fs.readFileSync(filePath, "utf-8");
      const comment = `\n// ${relativePath}\n`;
      mergedContent += comment + content + "\n";
    }
  });
};

// Start reading from the current directory
readFilesRecursively(__dirname);

// Write the merged content to a .txt file
fs.writeFileSync(outputFilePath, mergedContent);

console.log("All content merged into", outputFilePath);
process.exit(0); // Ensure the script exits


// netlify.toml
[build]
  command = "npm run build"
  publish = "build"

[[headers]]
  for = "/*"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"


// package.json
{
  "name": "airport-time-estimator",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@types/node": "^20.12.12",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "bootstrap": "^5.3.3",
    "react": "^18.3.1",
    "react-bootstrap": "^2.10.2",
    "react-datepicker": "^6.9.0",
    "react-dom": "^18.3.1",
    "react-router-dom": "^6.23.1",
    "react-scripts": "^5.0.1",
    "typescript": "^5.4.5"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": "react-app"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}


// public/index.html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/appstore.png" />
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <title>Airport Time Calculator - Silv.app</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>


// public/manifest.json
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "android-chrome-192x192.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "android-chrome-512x512.png",
      "sizes": "512x512",
      "type": "image/png"
    },
    {
      "src": "appstore.png",
      "sizes": "1024x1024",
      "type": "image/png"
    },
    {
      "src": "favicon-16x16.png",
      "sizes": "16x16",
      "type": "image/png"
    },
    {
      "src": "favicon-32x32.png",
      "sizes": "32x32",
      "type": "image/png"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}


// src/App.js
import React, { useState } from "react";
import "bootstrap/dist/css/bootstrap.min.css";
import { Container, Row, Col, Alert } from "react-bootstrap";
import FlightForm from "./FlightForm";
import { Routes, Route } from "react-router-dom";

function App() {
  const [leaveTime, setLeaveTime] = useState("");

  const handleCalculate = (leaveTimeString) => {
    console.log("Setting leave time:", leaveTimeString); // Debug
    setLeaveTime(`You should leave at: ${leaveTimeString}`);
  };

  return (
    <Container className="mt-4">
      <Row className="justify-content-center">
        <Col xs={12} sm={10} md={8} lg={6} xl={5} className="text-center">
          <h1>What time should I leave for the airport?</h1>
        </Col>
      </Row>
      <Row className="justify-content-center">
        <Col xs={12} sm={10} md={8} lg={6} xl={5}>
          <div className="border p-4 rounded shadow-sm bg-light">
            <Routes>
              <Route
                path="/"
                element={<FlightForm onCalculate={handleCalculate} />}
              />
            </Routes>
            {leaveTime && (
              <div>
                <Alert
                  variant="info"
                  className="text-center mt-3 font-weight-bold"
                >
                  {leaveTime}
                </Alert>
              </div>
            )}
          </div>
        </Col>
      </Row>
    </Container>
  );
}

export default App;


// src/FlightForm.js
import React from "react";
import FlightFormLogic from "./FlightFormLogic";

const FlightForm = ({ onCalculate }) => {
  return <FlightFormLogic onCalculate={onCalculate} />;
};

export default FlightForm;


// src/FlightFormLogic.js
import React, { useState, useEffect, useCallback } from "react";
import FlightFormInputs from "./components/FlightFormInputs";
import { addDays } from "date-fns";
import { useNavigate, useLocation } from "react-router-dom";
import CalendarLink from "./components/CalendarLink";
import {
  formatTime,
  parseTimeString,
  formatInputTime,
} from "./utils/timeUtils";

const FlightFormLogic = ({ onCalculate }) => {
  const navigate = useNavigate();
  const location = useLocation();
  const params = new URLSearchParams(location.search);

  const defaultDepartureTime = "11:00";
  const defaultDrivingTime = "45";
  const defaultArriveEarly = "30";
  const defaultSnackTime = "5";
  const defaultDate = addDays(new Date(), 1);

  const getDefaultDate = () => {
    const dateParam = params.get("date");
    if (dateParam) {
      const date = new Date(dateParam);
      return date < new Date() ? defaultDate : date;
    }
    return defaultDate;
  };

  const [departureTime, setDepartureTime] = useState(
    params.get("departureTime") || defaultDepartureTime
  );
  const [boardingTime, setBoardingTime] = useState("");
  const [drivingTime, setDrivingTime] = useState(
    params.get("drivingTime") || defaultDrivingTime
  );
  const [arriveEarly, setArriveEarly] = useState(
    params.get("arriveEarly") || defaultArriveEarly
  );
  const [snackTime, setSnackTime] = useState(
    params.get("snackTime") || defaultSnackTime
  );
  const [selectedDate, setSelectedDate] = useState(getDefaultDate());
  const [isDefault, setIsDefault] = useState(true);
  const [totalMinutes, setTotalMinutes] = useState(0);
  const [leaveTime, setLeaveTime] = useState("");

  const updateURLParams = () => {
    if (isDefault) return;
    const searchParams = new URLSearchParams();
    searchParams.set("departureTime", departureTime);
    searchParams.set("drivingTime", drivingTime);
    searchParams.set("arriveEarly", arriveEarly);
    searchParams.set("snackTime", snackTime);
    searchParams.set("date", selectedDate.toISOString().split("T")[0]);
    navigate({ search: searchParams.toString() });
  };

  const calculateLeaveTime = useCallback(() => {
    if (!boardingTime) {
      console.log("Boarding time is not set yet.");
      return;
    }

    const { hours: boardingHours, minutes: boardingMinutes } =
      parseTimeString(boardingTime);

    const totalMinutes =
      parseInt(drivingTime, 10) +
      parseInt(arriveEarly, 10) +
      parseInt(snackTime, 10);

    const leaveDate = new Date(selectedDate);
    leaveDate.setHours(boardingHours);
    leaveDate.setMinutes(boardingMinutes - totalMinutes);

    if (isNaN(leaveDate.getTime())) {
      console.error("Invalid leave date:", leaveDate);
      return;
    }

    const formattedLeaveTime = formatTime(leaveDate);
    console.log(`Calculated leave time: ${formattedLeaveTime}`);

    if (formattedLeaveTime) {
      onCalculate(formattedLeaveTime);
      setLeaveTime(formattedLeaveTime);
      setTotalMinutes(totalMinutes);
    }

    return leaveDate;
  }, [
    boardingTime,
    drivingTime,
    arriveEarly,
    snackTime,
    selectedDate,
    onCalculate,
  ]);

  useEffect(() => {
    if (departureTime) {
      const [hours, minutes] = departureTime.split(":").map(Number);
      const boardingDate = new Date();
      boardingDate.setHours(hours);
      boardingDate.setMinutes(minutes - 30);
      const newBoardingTime = formatInputTime(boardingDate);
      setBoardingTime(newBoardingTime);
      console.log("Calculated Boarding Time:", newBoardingTime);
    }
  }, [departureTime]);

  useEffect(() => {
    if (boardingTime) {
      calculateLeaveTime();
    }
  }, [boardingTime, calculateLeaveTime]);

  useEffect(() => {
    updateURLParams();
    calculateLeaveTime();
  }, [
    departureTime,
    drivingTime,
    arriveEarly,
    snackTime,
    selectedDate,
    calculateLeaveTime,
  ]);

  const handleDepartureChange = (e) => {
    setDepartureTime(e.target.value);
    setIsDefault(false);
  };

  const handleDrivingTimeChange = (e) => {
    setDrivingTime(e.target.value);
    setIsDefault(false);
  };

  const handleArriveEarlyChange = (e) => {
    setArriveEarly(e.target.value);
    setIsDefault(false);
  };

  const handleSnackTimeChange = (e) => {
    setSnackTime(e.target.value);
    setIsDefault(false);
  };

  const handleDateChange = (date) => {
    setSelectedDate(date);
    setIsDefault(false);
  };

  const handleReset = () => {
    setDepartureTime(defaultDepartureTime);
    setBoardingTime("");
    setDrivingTime(defaultDrivingTime);
    setArriveEarly(defaultArriveEarly);
    setSnackTime(defaultSnackTime);
    setSelectedDate(defaultDate);
    setIsDefault(true);
    setLeaveTime("");
    navigate({ search: "" });
  };

  return (
    <div>
      <FlightFormInputs
        departureTime={departureTime}
        boardingTime={boardingTime}
        drivingTime={drivingTime}
        arriveEarly={arriveEarly}
        snackTime={snackTime}
        handleDepartureChange={handleDepartureChange}
        handleDrivingTimeChange={handleDrivingTimeChange}
        handleArriveEarlyChange={handleArriveEarlyChange}
        handleSnackTimeChange={handleSnackTimeChange}
        selectedDate={selectedDate}
        handleDateChange={handleDateChange}
      />
      <CalendarLink
        leaveTime={leaveTime}
        selectedDate={selectedDate}
        totalMinutes={totalMinutes}
      />
      <div className="text-center mt-3">
        <button className="btn btn-secondary" onClick={handleReset}>
          Reset
        </button>
      </div>
      <div className="text-center mt-3 font-weight-bold">
        You should leave at: {leaveTime}
      </div>
    </div>
  );
};

export default FlightFormLogic;


// src/components/CalendarLink.js
import React, { useEffect, useState, useCallback } from "react";
import { formatDateTime, parseTimeString } from "../utils/timeUtils";

const CalendarLink = ({ leaveTime, selectedDate }) => {
  const [calendarLink, setCalendarLink] = useState("");

  const createGoogleCalendarLink = useCallback(() => {
    if (!leaveTime) {
      console.error("Invalid leave time: leaveTime is empty or undefined");
      return;
    }

    const { hours, minutes } = parseTimeString(leaveTime);

    if (isNaN(hours) || isNaN(minutes)) {
      console.error(`Invalid leave time: ${leaveTime}`);
      return;
    }

    const leaveDate = new Date(selectedDate);
    leaveDate.setHours(hours);
    leaveDate.setMinutes(minutes);

    const formattedStart = formatDateTime(leaveDate);
    const formattedEnd = formatDateTime(
      new Date(leaveDate.getTime() + 3600000)
    ); // Add one hour for the end time
    const baseURL = "https://www.google.com/calendar/render";
    const params = new URLSearchParams({
      action: "TEMPLATE",
      text: "Depart for Airport",
      dates: `${formattedStart}/${formattedEnd}`,
      details:
        "Time to leave for the airport. Created by https://airportcalc.silv.app/",
    });
    setCalendarLink(`${baseURL}?${params.toString()}`);
  }, [leaveTime, selectedDate]);

  useEffect(() => {
    createGoogleCalendarLink();
  }, [leaveTime, selectedDate, createGoogleCalendarLink]);

  return (
    <div className="text-center mt-3">
      <a href={calendarLink} target="_blank" rel="noopener noreferrer">
        Add to Calendar
      </a>
    </div>
  );
};

export default CalendarLink;


// src/components/FlightFormInputs.js
import React from "react";
import { Form } from "react-bootstrap";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";

const FlightFormInputs = ({
  departureTime,
  boardingTime,
  drivingTime,
  arriveEarly,
  snackTime,
  handleDepartureChange,
  handleDrivingTimeChange,
  handleArriveEarlyChange,
  handleSnackTimeChange,
  selectedDate,
  handleDateChange,
}) => {
  return (
    <Form>
      <Form.Group>
        <Form.Label htmlFor="departure-time">Departure Time:</Form.Label>
        <Form.Control
          type="time"
          id="departure-time"
          value={departureTime}
          onChange={handleDepartureChange}
        />
      </Form.Group>
      <Form.Group>
        <Form.Label htmlFor="boarding-time">Boarding Time:</Form.Label>
        <Form.Control
          type="time"
          id="boarding-time"
          value={boardingTime}
          readOnly
        />
      </Form.Group>
      <Form.Group>
        <Form.Label htmlFor="driving-time">
          Driving Time to Airport (minutes):
        </Form.Label>
        <Form.Control
          type="number"
          id="driving-time"
          value={drivingTime}
          onChange={handleDrivingTimeChange}
          style={{ width: "70px" }}
        />
      </Form.Group>
      <Form.Group>
        <Form.Label htmlFor="arrive-early">
          Arrive how soon before boarding? (minutes):
        </Form.Label>
        <Form.Control
          type="number"
          id="arrive-early"
          value={arriveEarly}
          onChange={handleArriveEarlyChange}
          style={{ width: "70px" }}
        />
      </Form.Group>
      <Form.Group>
        <Form.Label htmlFor="snack-time">
          Time For Snacks? (minutes):
        </Form.Label>
        <Form.Control
          type="number"
          id="snack-time"
          value={snackTime}
          onChange={handleSnackTimeChange}
          style={{ width: "70px" }}
        />
      </Form.Group>
      <Form.Group>
        <Form.Label>Departure Date:</Form.Label>
        <DatePicker
          selected={selectedDate}
          onChange={handleDateChange}
          dateFormat="yyyy-MM-dd"
          className="form-control"
        />
      </Form.Group>
    </Form>
  );
};

export default FlightFormInputs;


// src/components/TimeInput.js
import React from "react";
import { Form } from "react-bootstrap";

const TimeInput = ({ label, value, onChange, readOnly = false }) => (
  <Form.Group>
    <Form.Label>{label}</Form.Label>
    <Form.Control
      type="time"
      value={value}
      onChange={onChange}
      readOnly={readOnly}
    />
  </Form.Group>
);

export default TimeInput;


// src/index.js
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import { BrowserRouter as Router } from "react-router-dom";
import "bootstrap/dist/css/bootstrap.min.css";

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
  <Router>
    <App />
  </Router>
);


// src/utils/dateUtils.js
import { format } from "date-fns";

export const formatDateTime = (date) => {
  return format(date, "yyyyMMdd'T'HHmmss");
};


// src/utils/timeUtils.js
import { format } from "date-fns";

export const formatDateTime = (date) => {
  return format(date, "yyyyMMdd'T'HHmmss");
};

export const formatTime = (date) => {
  const hours = date.getHours();
  const minutes = date.getMinutes();
  const ampm = hours >= 12 ? "PM" : "AM";
  const formattedHours = (hours % 12 || 12).toString().padStart(2, "0");
  const formattedMinutes = minutes.toString().padStart(2, "0");
  return `${formattedHours}:${formattedMinutes} ${ampm}`;
};

export const formatInputTime = (date) => {
  const hours = date.getHours().toString().padStart(2, "0");
  const minutes = date.getMinutes().toString().padStart(2, "0");
  return `${hours}:${minutes}`;
};

export const parseTimeString = (timeString) => {
  const [time, modifier] = timeString.split(" ");
  let [hours, minutes] = time.split(":");
  hours = parseInt(hours, 10);
  minutes = parseInt(minutes, 10);

  if (modifier === "PM" && hours !== 12) hours += 12;
  if (modifier === "AM" && hours === 12) hours = 0;

  return { hours, minutes };
};


// webpack.config.js
const { ESBuildPlugin } = require("esbuild-loader");

module.exports = {
  module: {
    rules: [
      {
        test: /\.(js|mjs|jsx|ts|tsx)$/,
        exclude: /node_modules/,
        use: {
          loader: "esbuild-loader",
          options: {
            loader: "jsx", // Remove this if you're not using JSX
            target: "es2015",
          },
        },
      },
    ],
  },
  plugins: [new ESBuildPlugin()],
};


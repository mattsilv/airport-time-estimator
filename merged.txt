
// README.md
# Airport Time Estimator

[![Netlify Status](https://api.netlify.com/api/v1/badges/f145b5d3-22b3-40da-b586-80ba24c5afe9/deploy-status)](https://app.netlify.com/sites/airport-time-calc/deploys)

## Overview

The Airport Time Estimator is a simple web application that helps you calculate the optimal time to leave for the airport. By inputting your departure time, driving time to the airport, how early you want to arrive before boarding, and additional time for snacks, the app will compute when you should leave.

[Live Demo](https://airportcalc.silv.app/)

## Features

- **Responsive Design**: Mobile-first approach ensures the app looks great on all devices.
- **User-Friendly Interface**: Simple and intuitive form inputs.
- **Real-Time Calculation**: Automatically calculates the best time to leave as you input your details.
- **Add to Calendar**: Provides an option to add the calculated time to your Google Calendar.

## Getting Started

### Prerequisites

- Node.js (v14 or later)
- npm (v6 or later)

### Installation

1. Clone the repository:

   ```sh
   git clone https://github.com/yourusername/airport-time-estimator.git
   cd airport-time-estimator
   ```

2. Install dependencies:

   ```sh
   npm install
   ```

3. Start the development server:

   ```sh
   npm start
   ```

   The app should now be running on `http://localhost:3000`.

### Building for Production

To create a production build of the app, run:

```sh
npm run build
```

The production-ready files will be in the `build` directory.

## Deployment

This project is configured to deploy on Netlify. The build command and publish directory are specified in the `netlify.toml` file:

```toml
[build]
  command = "npm run build"
  publish = "build"

[[headers]]
  for = "/*"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"
```

## Project Structure

- `public/`: Static assets and the HTML template.
- `src/`: Source code, including components, hooks, and utilities.
- `src/App.js`: Main app component.
- `src/components/`: Contains individual React components.
- `src/hooks/`: Custom hooks for managing form state and URL parameters.
- `src/utils/`: Utility functions for date and time formatting.

## Contributing

Contributions are welcome! Please follow these steps:

1. Fork the repository.
2. Create a new branch (`git checkout -b feature/your-feature`).
3. Make your changes and commit them (`git commit -m 'Add some feature'`).
4. Push to the branch (`git push origin feature/your-feature`).
5. Open a pull request.

## License

This project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.

## Acknowledgements

- [React](https://reactjs.org/)
- [Bootstrap](https://getbootstrap.com/)
- [Date-fns](https://date-fns.org/)

---

Thank you for using the Airport Time Estimator!


// netlify.toml
[build]
  command = "npm run build"
  publish = "build"

[[headers]]
  for = "/*"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"


// package.json
{
  "name": "airport-time-estimator",
  "version": "0.1.0",
  "license": "MIT",
  "private": true,
  "dependencies": {
    "@types/node": "^20.12.12",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "bootstrap": "^5.3.3",
    "react": "^18.3.1",
    "react-bootstrap": "^2.10.2",
    "react-datepicker": "^6.9.0",
    "react-dom": "^18.3.1",
    "react-router-dom": "^6.23.1",
    "react-scripts": "^5.0.1",
    "typescript": "^5.4.5"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": "react-app"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@babel/plugin-proposal-private-property-in-object": "^7.21.11"
  }
}


// public/index.html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="a simple app to tell you what time you should leave for the airport"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/appstore.png" />
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <title>Airport Time Calculator - Silv.app</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>


// public/manifest.json
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "android-chrome-192x192.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "android-chrome-512x512.png",
      "sizes": "512x512",
      "type": "image/png"
    },
    {
      "src": "appstore.png",
      "sizes": "1024x1024",
      "type": "image/png"
    },
    {
      "src": "favicon-16x16.png",
      "sizes": "16x16",
      "type": "image/png"
    },
    {
      "src": "favicon-32x32.png",
      "sizes": "32x32",
      "type": "image/png"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}


// src/App.css
/* App.css */
body {
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
    "Helvetica Neue", Arial, sans-serif;
  background-color: #f8f9fa;
  color: #212529;
}

h1 {
  font-size: 1.5rem;
  margin-bottom: 1rem;
}

.container {
  padding: 0 1rem;
}

.form-control {
  font-size: 1rem;
  padding: 0.5rem;
}

button {
  font-size: 1rem;
  padding: 0.75rem;
}

.mb-3 {
  margin-bottom: 1rem !important;
}

.footer {
  margin-top: 2rem;
  padding: 1rem 0;
  background-color: #f8f9fa;
}

.footer p {
  margin: 0;
  font-size: 0.875rem;
  color: #6c757d;
}


// src/App.js
// src/App.js
import React, { useState } from "react";
import "bootstrap/dist/css/bootstrap.min.css";
import { Container, Row, Col, Alert } from "react-bootstrap";
import FlightForm from "./FlightForm";
import { Routes, Route } from "react-router-dom";
import "./App.css"; // Import the new CSS file

function App() {
  const [leaveTime, setLeaveTime] = useState("");

  const handleCalculate = (leaveTimeString) => {
    setLeaveTime(`You should leave at: ${leaveTimeString}`);
  };

  return (
    <Container className="mt-4">
      <Row className="justify-content-center">
        <Col xs={12} className="text-center">
          <h1>What time should I leave for the airport?</h1>
        </Col>
      </Row>
      <Row className="justify-content-center">
        <Col xs={12}>
          <div className="border p-4 rounded shadow-sm bg-light">
            <Routes>
              <Route
                path="/"
                element={<FlightForm onCalculate={handleCalculate} />}
              />
            </Routes>
            {leaveTime && (
              <Alert variant="info" className="text-center mt-3">
                {leaveTime}
              </Alert>
            )}
          </div>
        </Col>
      </Row>
      <footer className="footer mt-4">
        <p className="text-center small">
          a silly&nbsp;
          <a
            href="https://github.com/mattsilv/airport-time-estimator"
            target="_blank"
            rel="noopener noreferrer"
          >
            open-source
          </a>{" "}
          app by{" "}
          <a href="https://silv.blog" target="_blank" rel="noopener noreferrer">
            silv.eth
          </a>
        </p>
      </footer>
    </Container>
  );
}

export default App;


// src/FlightForm.js
import React from "react";
import FlightFormLogic from "./FlightFormLogic";

const FlightForm = ({ onCalculate }) => {
  return <FlightFormLogic onCalculate={onCalculate} />;
};

export default FlightForm;


// src/FlightFormLogic.js
import React, { useCallback, useEffect, useState } from "react";
import FlightFormInputs from "./components/FlightFormInputs";
import CalendarLink from "./components/CalendarLink";
import { useNavigate, useLocation } from "react-router-dom";
import { formatTime, parseTimeString } from "./utils/timeUtils";
import useFormState from "./hooks/useFormState";
import useUrlParams from "./hooks/useUrlParams";
import { getDefaultDate } from "./utils/dateUtils";

const formFieldsConfig = [
  { name: "departureTime", defaultValue: "11:00" },
  { name: "drivingTime", defaultValue: "45" },
  { name: "arriveEarly", defaultValue: "30" },
  { name: "snackTime", defaultValue: "5" },
];

const FlightFormLogic = ({ onCalculate }) => {
  const navigate = useNavigate();
  const location = useLocation();
  const defaultDate = getDefaultDate(location);

  const {
    formValues,
    selectedDate,
    boardingTime,
    isInitialLoad,
    handleFieldChange,
    setSelectedDate,
    setBoardingTime,
    resetFields,
    setIsInitialLoad, // Make sure to use setIsInitialLoad from the hook
  } = useFormState(formFieldsConfig, defaultDate);

  const [leaveTime, setLeaveTime] = useState("");

  useUrlParams(
    formValues,
    selectedDate,
    isInitialLoad,
    formFieldsConfig,
    defaultDate
  );

  const calculateLeaveTime = useCallback(() => {
    if (!boardingTime) {
      console.log("Boarding time is not set yet.");
      return;
    }

    const { hours: boardingHours, minutes: boardingMinutes } =
      parseTimeString(boardingTime);

    const totalMinutes =
      parseInt(formValues.drivingTime, 10) +
      parseInt(formValues.arriveEarly, 10) +
      parseInt(formValues.snackTime, 10);

    const leaveDate = new Date(selectedDate);
    leaveDate.setHours(boardingHours);
    leaveDate.setMinutes(boardingMinutes - totalMinutes);

    if (isNaN(leaveDate.getTime())) {
      console.error("Invalid leave date:", leaveDate);
      return;
    }

    const formattedLeaveTime = formatTime(leaveDate);
    console.log(`Calculated leave time: ${formattedLeaveTime}`);

    if (formattedLeaveTime) {
      onCalculate(formattedLeaveTime);
      setLeaveTime(formattedLeaveTime);
      console.log(`Leave time set to: ${formattedLeaveTime}`);
    }
  }, [boardingTime, formValues, selectedDate, onCalculate]);

  useEffect(() => {
    if (
      formValues.departureTime &&
      boardingTime &&
      formValues.drivingTime &&
      formValues.arriveEarly &&
      formValues.snackTime &&
      selectedDate
    ) {
      calculateLeaveTime();
    }
  }, [
    formValues.departureTime,
    boardingTime,
    formValues.drivingTime,
    formValues.arriveEarly,
    formValues.snackTime,
    selectedDate,
    calculateLeaveTime,
  ]);

  const handleDateChange = (date) => {
    setSelectedDate(date);
    setIsInitialLoad(false);
    console.log(`Date changed to: ${date}`);
  };

  const handleReset = () => {
    resetFields();
    setBoardingTime("");
    setLeaveTime("");
    navigate("/", { replace: true });
    console.log("Reset button clicked, URL and state reset");
  };

  return (
    <div>
      <FlightFormInputs
        formValues={formValues}
        handleFieldChange={handleFieldChange}
        selectedDate={selectedDate}
        handleDateChange={handleDateChange}
        boardingTime={boardingTime}
      />
      <CalendarLink leaveTime={leaveTime} selectedDate={selectedDate} />
      <div className="text-center mt-3">
        <button className="btn btn-secondary" onClick={handleReset}>
          Reset
        </button>
      </div>
    </div>
  );
};

export default FlightFormLogic;


// src/components/CalendarLink.js
import React, { useEffect, useState, useCallback } from "react";
import { formatDateTime, parseTimeString } from "../utils/timeUtils";

const CalendarLink = ({ leaveTime, selectedDate }) => {
  const [calendarLink, setCalendarLink] = useState("");

  const createGoogleCalendarLink = useCallback(() => {
    if (!leaveTime) {
      console.error("Invalid leave time: leaveTime is empty or undefined");
      return;
    }

    const { hours, minutes } = parseTimeString(leaveTime);

    if (isNaN(hours) || isNaN(minutes)) {
      console.error(`Invalid leave time: ${leaveTime}`);
      return;
    }

    const leaveDate = new Date(selectedDate);
    leaveDate.setHours(hours);
    leaveDate.setMinutes(minutes);

    const formattedStart = formatDateTime(leaveDate);
    const formattedEnd = formatDateTime(
      new Date(leaveDate.getTime() + 3600000)
    ); // Add one hour for the end time
    const baseURL = "https://www.google.com/calendar/render";
    const params = new URLSearchParams({
      action: "TEMPLATE",
      text: "Depart for Airport",
      dates: `${formattedStart}/${formattedEnd}`,
      details:
        "Time to leave for the airport. Created by https://airportcalc.silv.app/",
    });
    setCalendarLink(`${baseURL}?${params.toString()}`);
    console.log("Calendar link created:", `${baseURL}?${params.toString()}`);
  }, [leaveTime, selectedDate]);

  useEffect(() => {
    createGoogleCalendarLink();
  }, [leaveTime, selectedDate, createGoogleCalendarLink]);

  return (
    <div className="text-center mt-3">
      <a href={calendarLink} target="_blank" rel="noopener noreferrer">
        Add to Calendar
      </a>
    </div>
  );
};

export default CalendarLink;


// src/components/FlightFormInputs.js
// src/components/FlightFormInputs.js
import React from "react";
import { Form, Button } from "react-bootstrap";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";

const FlightFormInputs = ({
  formValues,
  handleFieldChange,
  selectedDate,
  handleDateChange,
  boardingTime,
}) => {
  return (
    <Form>
      <Form.Group className="mb-3">
        <Form.Label htmlFor="departureTime">Departure Time:</Form.Label>
        <Form.Control
          type="time"
          id="departureTime"
          value={formValues.departureTime}
          onChange={handleFieldChange("departureTime")}
        />
      </Form.Group>
      <Form.Group className="mb-3">
        <Form.Label htmlFor="boardingTime">Boarding Time:</Form.Label>
        <Form.Control
          type="time"
          id="boardingTime"
          value={boardingTime}
          readOnly
        />
      </Form.Group>
      <Form.Group className="mb-3">
        <Form.Label htmlFor="drivingTime">
          Driving Time to Airport (minutes):
        </Form.Label>
        <Form.Control
          type="number"
          id="drivingTime"
          value={formValues.drivingTime}
          onChange={handleFieldChange("drivingTime")}
        />
      </Form.Group>
      <Form.Group className="mb-3">
        <Form.Label htmlFor="arriveEarly">
          Arrive how soon before boarding? (minutes):
        </Form.Label>
        <Form.Control
          type="number"
          id="arriveEarly"
          value={formValues.arriveEarly}
          onChange={handleFieldChange("arriveEarly")}
        />
      </Form.Group>
      <Form.Group className="mb-3">
        <Form.Label htmlFor="snackTime">Time For Snacks? (minutes):</Form.Label>
        <Form.Control
          type="number"
          id="snackTime"
          value={formValues.snackTime}
          onChange={handleFieldChange("snackTime")}
        />
      </Form.Group>
      <Form.Group className="mb-3">
        <Form.Label>Departure Date:</Form.Label>
        <DatePicker
          selected={selectedDate}
          onChange={handleDateChange}
          dateFormat="yyyy-MM-dd"
          className="form-control"
        />
      </Form.Group>
      <Button variant="primary" type="submit" className="w-100">
        Calculate
      </Button>
    </Form>
  );
};

export default FlightFormInputs;


// src/components/TimeInput.js
import React from "react";
import { Form } from "react-bootstrap";

const TimeInput = ({ label, value, onChange, readOnly = false }) => (
  <Form.Group>
    <Form.Label>{label}</Form.Label>
    <Form.Control
      type="time"
      value={value}
      onChange={onChange}
      readOnly={readOnly}
    />
  </Form.Group>
);

export default TimeInput;


// src/hooks/useFormField.js
import { useState, useEffect } from "react";
import { useNavigate, useLocation } from "react-router-dom";

function useFormField(name, defaultValue) {
  const navigate = useNavigate();
  const location = useLocation();
  const params = new URLSearchParams(location.search);

  const [value, setValue] = useState(params.get(name) || defaultValue);
  const [isDefault, setIsDefault] = useState(!params.get(name));

  useEffect(() => {
    if (!isDefault) {
      const searchParams = new URLSearchParams(location.search);
      searchParams.set(name, value);
      navigate({ search: searchParams.toString() });
    }
  }, [name, value, isDefault, navigate, location.search]);

  const handleChange = (e) => {
    setValue(e.target.value);
    setIsDefault(false);
  };

  const handleReset = () => {
    setValue(defaultValue);
    setIsDefault(true);
  };

  return { value, isDefault, handleChange, handleReset };
}

export default useFormField;


// src/hooks/useFormState.js
import { useState, useEffect } from "react";
import { formatInputTime } from "../utils/timeUtils";

const useFormState = (formFieldsConfig, defaultDate) => {
  const [formValues, setFormValues] = useState(() =>
    formFieldsConfig.reduce((acc, field) => {
      const params = new URLSearchParams(window.location.search);
      acc[field.name] = params.get(field.name) || field.defaultValue;
      return acc;
    }, {})
  );
  const [selectedDate, setSelectedDate] = useState(defaultDate);
  const [boardingTime, setBoardingTime] = useState("");
  const [isInitialLoad, setIsInitialLoad] = useState(true);

  const handleFieldChange = (name) => (e) => {
    const newValue = e.target.value;
    setFormValues((prevValues) => ({
      ...prevValues,
      [name]: newValue,
    }));
    setIsInitialLoad(false);
  };

  const resetFields = () => {
    setFormValues(
      formFieldsConfig.reduce((acc, field) => {
        acc[field.name] = field.defaultValue;
        return acc;
      }, {})
    );
    setSelectedDate(defaultDate);
    setIsInitialLoad(true);
  };

  useEffect(() => {
    if (isInitialLoad) {
      const [hours, minutes] = formValues.departureTime.split(":").map(Number);
      const boardingDate = new Date(selectedDate);
      boardingDate.setHours(hours);
      boardingDate.setMinutes(minutes - 30);
      const newBoardingTime = formatInputTime(boardingDate);
      setBoardingTime(newBoardingTime);
    }
  }, [formValues.departureTime, selectedDate, isInitialLoad]);

  return {
    formValues,
    selectedDate,
    boardingTime,
    isInitialLoad,
    handleFieldChange,
    setSelectedDate,
    setBoardingTime,
    resetFields,
    setIsInitialLoad, // Make sure to return setIsInitialLoad
  };
};

export default useFormState;


// src/hooks/useUrlParams.js
import { useEffect } from "react";
import { useNavigate, useLocation } from "react-router-dom";

const useUrlParams = (
  formValues,
  selectedDate,
  isInitialLoad,
  formFieldsConfig,
  defaultDate
) => {
  const navigate = useNavigate();
  const location = useLocation();

  useEffect(() => {
    if (!isInitialLoad) {
      const params = new URLSearchParams(location.search);
      let shouldNavigate = false;

      Object.entries(formValues).forEach(([key, value]) => {
        const defaultValue = formFieldsConfig.find(
          (field) => field.name === key
        ).defaultValue;
        if (value !== defaultValue) {
          if (params.get(key) !== value) {
            params.set(key, value);
            shouldNavigate = true;
          }
        } else if (params.has(key)) {
          params.delete(key);
          shouldNavigate = true;
        }
      });

      const formattedDate = selectedDate.toISOString().split("T")[0];
      if (formattedDate !== defaultDate.toISOString().split("T")[0]) {
        if (params.get("date") !== formattedDate) {
          params.set("date", formattedDate);
          shouldNavigate = true;
        }
      } else if (params.has("date")) {
        params.delete("date");
        shouldNavigate = true;
      }

      if (shouldNavigate) {
        navigate({ search: params.toString() }, { replace: true });
      }
    }
  }, [
    formValues,
    selectedDate,
    isInitialLoad,
    formFieldsConfig,
    defaultDate,
    location.search,
    navigate,
  ]);
};

export default useUrlParams;


// src/index.js
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import { BrowserRouter as Router } from "react-router-dom";
import "bootstrap/dist/css/bootstrap.min.css";

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
  <Router>
    <App />
  </Router>
);


// src/utils/dateUtils.js
import { format, addDays } from "date-fns";

export const formatDateTime = (date) => {
  return format(date, "yyyyMMdd'T'HHmmss");
};

export const getDefaultDate = (location) => {
  const params = new URLSearchParams(location.search);
  const dateParam = params.get("date");
  const defaultDate = addDays(new Date(), 1);

  if (dateParam) {
    const date = new Date(dateParam);
    return date < new Date() ? defaultDate : date;
  }
  return defaultDate;
};


// src/utils/timeUtils.js
import { format } from "date-fns";

export const formatDateTime = (date) => {
  return format(date, "yyyyMMdd'T'HHmmss");
};

export const formatTime = (date) => {
  const hours = date.getHours();
  const minutes = date.getMinutes();
  const ampm = hours >= 12 ? "PM" : "AM";
  const formattedHours = (hours % 12 || 12).toString().padStart(2, "0");
  const formattedMinutes = minutes.toString().padStart(2, "0");
  return `${formattedHours}:${formattedMinutes} ${ampm}`;
};

export const formatInputTime = (date) => {
  const hours = date.getHours().toString().padStart(2, "0");
  const minutes = date.getMinutes().toString().padStart(2, "0");
  return `${hours}:${minutes}`;
};

export const parseTimeString = (timeString) => {
  const [time, modifier] = timeString.split(" ");
  let [hours, minutes] = time.split(":");
  hours = parseInt(hours, 10);
  minutes = parseInt(minutes, 10);

  if (modifier === "PM" && hours !== 12) hours += 12;
  if (modifier === "AM" && hours === 12) hours = 0;

  return { hours, minutes };
};


// webpack.config.js
const { ESBuildPlugin } = require("esbuild-loader");

module.exports = {
  module: {
    rules: [
      {
        test: /\.(js|mjs|jsx|ts|tsx)$/,
        exclude: /node_modules/,
        use: {
          loader: "esbuild-loader",
          options: {
            loader: "jsx", // Remove this if you're not using JSX
            target: "es2015",
          },
        },
      },
    ],
  },
  plugins: [new ESBuildPlugin()],
};

